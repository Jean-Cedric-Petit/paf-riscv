#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include "convert.h"
#include "parser.h"

int conversion_tests()	{
	assert(register_convert(8, SRC1_REG, BGE) == (8 << 15));
	assert(register_convert(15, SRC2_REG, SB) == (15 << 20));
	assert(register_convert(31, DST_REG, LUI) == (31 << 7));
	printf("Register convrsions correct in normal cases.\n");

	assert(register_convert(-1, SRC1_REG, ADDI) == 0xffffffff);
	assert(register_convert(32, SRC2_REG, SUB) == 0xffffffff);
	assert(register_convert(258, DST_REG, JAL) != 0xffffffff);
	assert(register_convert(20, DST_REG, BNE) == 0);
	printf("Register conversions correct in non-normal cases.\n");

	assert(immediate_convert(0xfff00000, LUI, 0) == 0xfff00000);
	assert(immediate_convert(0x02e00400, AUIPC, 0) == 0xffffffff);
	printf("Immediate conversions correct for LUI/AUIPC.\n");

	assert(immediate_convert(0x001ffffe, JAL, 0) == 0xfffff000);
	assert(immediate_convert(0x00000203, JAL, 0) == 0xffffffff);
	assert(immediate_convert(0x10a00230, JAL, 0) == 0xffffffff);
	printf("Immediate conversions correct for JAL.\n");

	assert(immediate_convert(0x0000403a, LH, 0) == 0xffffffff);
	assert(immediate_convert(0x00000f30, XORI, 0) == 0xf3000000);
	assert(immediate_convert(0x00010000, JALR, 0) == 0xffffffff);
	printf("Immediate conversions correct for LOAD/IMM_OP/JALR.\n");

	assert(immediate_convert(0x00000021, BEQ, 0) == 0xffffffff);
	assert(immediate_convert(0x10000000, BNE, 0) == 0xffffffff);
	assert(immediate_convert(0x00001ffe, BLTU, 0) == 0xfe000f80);
	printf("Immediate conversions correct for BRANCH.\n");

	assert(immediate_convert(0x00001fff, SB, 0) == 0xffffffff);
	assert(immediate_convert(0x00000fff, SH, 0) == 0xfe000f80);
	printf("Immediate conversions correct for STORE.\n");

	assert(immediate_convert(0x00000001, ADD, 0) == 0);
	printf("Immediate conversions correct for REG_OP.\n");

	assert(shamt_convert(2, JAL) != 0);
	assert(shamt_convert(32, SLLI) == 0xffffffff);
	assert(shamt_convert(31, SRLI) == 0x01f00000);
	printf("Shamt conversions correct.\n");

	return 1;
}

int parser_tests()	{
	char str1[50] = "branch:xor x1, x2, x3\n";
	char str2[50] = "bne x2, x4, branch\n";
	char * s1 = malloc(52 * sizeof(char));
	char * s2 = malloc(52 * sizeof(char));
	strcpy(s1, str1);
	strcpy(s2, str2);
	pretreat(s1);
	pretreat(s2);
	printf("%s\n", s1);
	printf("%s\n", s2);
	printf("%08x\n", parse(s1, 0));
	printf("%08x\n", parse(s2, 4));
//	assert(parse(s1, 0) == 0b00000000001100100100010100110011);
//	assert(parse(s2, 0) == 0b00000001111100011000100000010011);
	free(s1);
	free(s2);
	return 1;
}

int main(int argc, char* argv[])	{
	if(conversion_tests())
		printf("Conversion tests succeeded.\n");

	if(parser_tests())
		printf("Parser tests succeeded.\n");

	return 0;
}
